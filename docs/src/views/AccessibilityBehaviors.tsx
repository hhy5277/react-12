import * as React from 'react'
import { Header, Icon } from '@stardust-ui/react'
import DocPage from '../components/DocPage'
import GuidesNavigationFooter from '../components/GuidesNavigationFooter'
import CodeSnippet from '../components/CodeSnippet'

const code = value => <code>{value}</code>

const link = (content, href, isExternal = false) => (
  <a href={href} {...isExternal && { target: 'blank' }}>
    {content} {isExternal ? <Icon name="external" size="small" link fitted /> : ''}
  </a>
)

export default () => (
  <DocPage title="Accessibility Behaviors">
    <Header as="h2">Content</Header>
    <ul>
      <li>{link('Overview', '/accessibility-behaviors#overview')}</li>
      <li>{link('ARIA attributes', '/accessibility-behaviors#aria-attributes')}</li>
      <li>
        {link('Keyboard', '/accessibility-behaviors#keyboard')}
        <ul>
          <li>{link('Navigation and focus', '/accessibility-behaviors#navigation-and-focus')}</li>
          <li>{link('Actions', '/accessibility-behaviors#actions')}</li>
        </ul>
      </li>
      <li>{link('Overriding behaviors', '/accessibility-behaviors#overriding-behaviors')}</li>
    </ul>
    <Header as="h2">Overview</Header>
    <p>
      In Stardust, accessibility behaviors encapsulate keyboard and screen reader navigation. They
      essentially add ARIA roles, ARIA attributes and event handlers to components' parts. The idea
      is to compose visual components and apply a behavior on top of them to achieve desired
      keyboard and screen reader navigation.
    </p>
    <p>
      Each relevant component comes with its default accessibility behavior. For some components
      there are additional behaviors to choose from. In addition to that, user can create custom
      behaviors and use them instead of the standard ones.
    </p>
    <p>
      Users are also able to add or override attributes generated by the accessibility behaviors if
      customization is needed.
    </p>
    <Header as="h2">ARIA attributes</Header>
    <p>
      Accessible Rich Internet Applications (ARIA) is a set of attributes that define ways to make
      web content more accessible to people with disabilities.
    </p>
    <p>
      ARIA attributes are applied according to{' '}
      {link('ARIA specification', 'https://www.w3.org/TR/wai-aria-1.1/', true)} and{' '}
      {link('ARIA best practices', 'https://www.w3.org/TR/wai-aria-practices-1.1/', true)}.
    </p>
    <p>For example, Menu component:</p>
    <CodeSnippet
      value={`
        const items = [
         {key: "editorials", content: "Editorials"} ,
         {key: "review", content: "Reviews" },
         {key: "events", content: "Upcoming Events" },
        ]

       const menu = <Menu items={items} />
      `}
    />
    <p>
      Default accessibility behavior for {code('Menu')} component is {code('menuBehavior')} (
      {code('menuItemBehavior')} for the {code('MenuItem')}). These behaviors add appropriate ARIA
      roles by default:
    </p>
    <p>Rendered HTML:</p>
    <CodeSnippet
      mode="html"
      label="App.jsx"
      value={`
        <ul role="menu" class="ui-menu ">
          <li class="ui-menu__item " role="presentation">
            <a class="ui-menu__item__anchor " role="menuitem" tabindex="0">Editorials</a>
          </li>
          <li class="ui-menu__item " role="presentation">
            <a class="ui-menu__item__anchor " role="menuitem" tabindex="0">Reviews</a>
          </li>
          <li class="ui-menu__item " role="presentation">
            <a class="ui-menu__item__anchor " role="menuitem" tabindex="0">Upcoming Events</a>
          </li>
        </ul>
      `}
    />
    <p>Menu behavior - role "menu" is applied to root part (container) of the component:</p>
    <CodeSnippet
      label={'menuBehavior.tsx'}
      value={`
      const menuBehavior: Accessibility = (props: any) => ({
        //...
        attributes: {
          root: {
            role: 'menu',
          },
        },
       //...
      })
      `}
    />
    <p>
      Menu item behavior - role "presentation" is applied to wrapper part of the component (which is{' '}
      {code('<li>')}
      element by default) and role "menuitem" and other attributes applied to root part of the
      component (which is {code('<a>')}
      element by default):
    </p>
    <CodeSnippet
      label={'menuItemBehavior.tsx'}
      value={`
      const menuItemBehavior: Accessibility = (props: any) => ({
        //...
        attributes: {
          wrapper: {
            role: 'presentation',
          },
          root: {
            role: 'menuitem',
            tabIndex: 0,
            'aria-expanded': props.menu ? props.menuOpen || false : undefined,
            'aria-haspopup': props.menu ? 'true' : undefined,
            'aria-label': props['aria-label'],
            'aria-labelledby': props['aria-labelledby'],
            'aria-describedby': props['aria-describedby'],
            'aria-disabled': !_.isNil(props['aria-disabled'])
              ? props['aria-disabled']
              : !!props['disabled']
              ? true
              : undefined,
            [IS_FOCUSABLE_ATTRIBUTE]: !props['disabled'],
            'aria-posinset': props.itemPosition,
            'aria-setsize': props.itemsCount,
          },
        },
        //...
      })
      `}
    />

    <Header as="h2" content="Keyboard" />
    <Header as="h3" content="Navigation and focus" />
    <Header as="h4" content="Focus Zone" />
    <Header as="h4" content="Focus Trap Zone" />
    <Header as="h4" content="Auto Focus Zone" />
    <Header as="h3" content="Actions" />

    <Header as="h2" content="Overriding behaviors" />
    <p>
      User can override the default behavior by using the {code('accessibility')} attribute, as well
      as override generated attributes:
    </p>
    <CodeSnippet
      label="App.jsx"
      value={`
        <Menu accessibility={TabListBehavior}>
          <Menu.Item role="tab">
            Conversation
          </Menu.Item>
        </Menu>
      `}
    />
    <Header as="h4" content="Available Behaviors" />
    <p>
      The default and other available behaviors for all the components can be found in the
      {link('documentation', 'https://stardust-ui.github.io/react/')}, together with notes on other
      accessibility considerations for using the component. The examples show the recommended way of
      using the components in the different variations - it is possible to edit example's code, see
      the rendered HTML, change themes and validate the rendering in RTL scenario, or with different
      behaviors.
    </p>

    <GuidesNavigationFooter
      previous={{ name: 'Accessibility', url: 'accessibility' }}
      next={{ name: 'Focus Zone', url: 'focus-zone' }}
    />
  </DocPage>
)
